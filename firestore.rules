rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(uid) {
      return isAuthenticated() && request.auth.uid == uid;
    }

    // Profiles collection
    // - Users can read their own profile
    // - Users can read public profiles
    // - Users can only write to their own profile
    match /profiles/{uid} {
      // Allow read if:
      // 1. User is reading their own profile, OR
      // 2. The profile is public
      allow read: if isOwner(uid) ||
                     (isAuthenticated() && resource.data.publicProfile == true);

      // Allow create only if:
      // 1. User is authenticated and creating their own profile
      allow create: if isOwner(uid) &&
                       request.resource.data.uid == uid &&
                       request.resource.data.email is string &&
                       request.resource.data.displayName is string;

      // Allow update only if:
      // 1. User owns the profile
      // 2. Cannot change uid or email
      allow update: if isOwner(uid) &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.email == resource.data.email;

      // Prevent deletion
      allow delete: if false;
    }

    // Settings collection
    // - Users can only access their own settings
    // - Settings are completely private
    match /settings/{uid} {
      // Only owner can read
      allow read: if isOwner(uid);

      // Only owner can create their settings
      allow create: if isOwner(uid) &&
                       request.resource.data.uid == uid;

      // Only owner can update their settings
      // Cannot change uid
      allow update: if isOwner(uid) &&
                       request.resource.data.uid == resource.data.uid;

      // Prevent deletion
      allow delete: if false;
    }

    // Tests collection
    // - Users can only access their own tests
    match /tests/{testId} {
      // Only owner can read their tests
      allow read: if isAuthenticated() && resource.data.user_id == request.auth.uid;

      // Only owner can create their tests
      allow create: if isAuthenticated() &&
                       request.resource.data.user_id == request.auth.uid &&
                       request.resource.data.type in ['mcq', 'coding'] &&
                       request.resource.data.status in ['in_progress', 'completed', 'pending_result'];

      // Only owner can update their tests
      allow update: if isAuthenticated() &&
                       resource.data.user_id == request.auth.uid &&
                       request.resource.data.user_id == resource.data.user_id;

      // Prevent deletion
      allow delete: if false;
    }

    // Questions collection
    // - Users can only access questions for their own tests
    match /questions/{questionId} {
      // Helper function to check test ownership
      function ownsTest(testId) {
        return exists(/databases/$(database)/documents/tests/$(testId)) &&
               get(/databases/$(database)/documents/tests/$(testId)).data.user_id == request.auth.uid;
      }

      // Only owner of the test can read questions
      allow read: if isAuthenticated() && ownsTest(resource.data.test_id);

      // Only owner of the test can create questions
      allow create: if isAuthenticated() && ownsTest(request.resource.data.test_id);

      // Only owner of the test can update questions
      allow update: if isAuthenticated() &&
                       ownsTest(resource.data.test_id) &&
                       request.resource.data.test_id == resource.data.test_id;

      // Prevent deletion
      allow delete: if false;
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
